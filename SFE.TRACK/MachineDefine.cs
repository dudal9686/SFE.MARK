///*************************************************************************///
/// Automatically generated C# machine definition
/// This file is generated by MachineMaster(1.0.0.11)
/// This file is generated at 2025-06-06 15:35
/// This file is for SFETrack(1.0.0.0))
/// Make sure you must not change this file
/// Manual change is prohibited. "Don't change"
///*************************************************************************///


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace MachineDefine
{
   public enum Enum3rdParty {
      SFE_CAN = 0,
      AzinECAT = 1,
      ComizoaECAT = 2,
      Azin = 3,
      Comizoa = 4,
      VMX3 = 5,
   };

   public enum EnumHomeDir {
      Left = 0,
      Right = 1,
      Up = 2,
      Down = 3,
      Cw = 4,
      Ccw = 5,
      Fwd = 6,
      Bwd = 7,
      Narrow = 8,
      Wide = 9,
   };

   public enum EnumLM {
      WatchDog = 0, // Watch dog
      PRB = 1,
      CSB = 2,
      IFB = 3,
   };

   public enum EnumAssy {
      SwitchButton = 0, // Start stop reset etc buttons
      Environment = 1, // Interlock kind thing
      TowerLamp = 2, // Towerlamp
      Developer = 3,
      PRA = 4,
      CRA = 5,
      IRA = 6,
      Coater = 7,
      Chamber = 8,
      Interface = 9,
      ChemicalBox = 10, // 약액공급장치
   };

   public enum EnumMotor {
      CRA_X = 0,
      CRA_Y = 1,
      CRA_Z = 2,
      PRA_X1 = 3,
      PRA_X2 = 4,
      PRA_X3 = 5,
      PRA_Y = 6,
      PRA_Z = 7,
      PRA_T = 8,
      D1_X1 = 9, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_PP2 = 10, // Board Type(string)
                                                                 // Channel(int)
                                                                 // Board ID(int)
                                                                 // ModuleNo(int)
      C1_X1 = 11, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_X2 = 12, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_BT = 13, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_PP1 = 14, // Board Type(string)
                                                                 // Channel(int)
                                                                 // Board ID(int)
                                                                 // ModuleNo(int)
      D2_X1 = 15, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_PP3 = 16, // Board Type(string)
                                                                 // Channel(int)
                                                                 // Board ID(int)
                                                                 // ModuleNo(int)
      CB01_Pin = 17, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(hex)
                                                                   // ModuleNo(int)
      CB02_Pin = 18, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB03_Pin = 19, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB05_Pin = 20, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB04_Pin = 21, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB06_Pin = 22, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB07_Pin = 23, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB08_Pin = 24, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB09_Pin = 25, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB10_Pin = 26, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB11_Pin = 27, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB12_Pin = 28, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      C1_SPIN = 29,
      D1_SPIN = 30,
      D2_SPIN = 31,
   };

   public enum EnumTeachingCRA_X {
      PosHome = 0,
      TrsPos = 1,
      GetPosTop = 2,
      GetPosBottom = 3,
      ScanPos = 4,
   };

   public enum EnumTeachingCRA_Y {
      PosHome = 0,
      GetPos = 1,
      PutPos = 2,
      ScanPos = 3, // test
   };

   public enum EnumTeachingCRA_Z {
      PosHome = 0,
      TrsPos = 1,
      TopPos = 2,
      BottomPos = 3,
      ScanPos = 4, // 첫번째 wafer 감지후 , 감지 안되는 위치로 천천히 내림
   };

   public enum EnumTeachingPRA_X1 {
      PosHome = 0,
      PR_X1_GetChamber = 1,
      PR_X1_PutChamber = 2,
   };

   public enum EnumTeachingPRA_X2 {
      PosHome = 0,
      PR_X2_PutChamber = 1,
      PR_X2_GetChamber = 2,
   };

   public enum EnumTeachingPRA_X3 {
      PosHome = 0,
      PR_X3_PutChamber = 1,
      PR_X3_GetChamber = 2,
   };

   public enum EnumTeachingPRA_Y {
      PosHome = 0,
      PR_Chamber = 1,
   };

   public enum EnumTeachingPRA_Z {
      PosHome = 0,
      PR_X1_GetChamber = 1,
      PR_X2_GetChamber = 2,
      PR_X3_GetChamber = 3,
      PR_X1_PutChamber = 4,
      PR_X2_PutChamber = 5,
      PR_X3_PutChamber = 6,
   };

   public enum EnumTeachingPRA_T {
      PR_Chamber = 0,
      PosHome = 1,
   };

   public enum EnumTeachingD1_X1 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
   };

   public enum EnumTeachingC1_PP2 {
      PosHome = 0,
   };

   public enum EnumTeachingC1_X1 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
   };

   public enum EnumTeachingC1_X2 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
      PosWaferEdge = 10,
   };

   public enum EnumTeachingC1_BT {
      PosNozzle1 = 0,
      PosNozzle2 = 1,
      PosNozzle3 = 2,
      PosNozzle4 = 3,
   };

   public enum EnumTeachingC1_PP1 {
      PosHome = 0,
   };

   public enum EnumTeachingD2_X1 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
   };

   public enum EnumTeachingC1_PP3 {
      PosHome = 0,
   };

   public enum EnumTeachingCB01_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB02_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB03_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB05_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB04_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB06_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB07_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB08_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB09_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB10_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB11_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB12_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumInput {
      Mappingforwardsensor = 0, // Mapping CYL forward detect
      Mappingbackwardsensor = 1, // Mapping CYL backward detect
      Liftpinupsensor = 2, // CRA pin up detect
      Liftpindownsensor = 3, // CRA pin down detect
      CRAwafersensor = 4, // CRA wafer detect
      Xchecksensor = 5, // 
      Xoutsensor = 6, // 
      CST1startswitch = 7, // CST1 start switch detect
      CST1stopswitch = 8, // CST1 stop switch detect
      CST2startswitch = 9, // CST2 start switch detect
      CST2stopswitch = 10, // CST2 stop switch detect
      CST3startswitch = 11, // CST3 start switch detect
      CST3stopswitch = 12, // CST3 stop switch detect
      CST4startswitch = 13, // CST4 start switch detect
      CST4stopswitch = 14, // CST4 stop switch detect
      CST1checksensor = 15, // 
      CST2checksensor = 16, // 
      CST3checksensor = 17, // 
      CST4checksensor = 18, // 
      CST1waferedgesensor = 19, // "Wafer extraction,Wafer transfer detect"
      CST2waferedgesensor = 20, // "Wafer extraction,Wafer transfer detect"
      CST3waferedgesensor = 21, // "Wafer extraction,Wafer transfer detect"
      CST4waferedgesensor = 22, // "Wafer extraction,Wafer transfer detect"
      Armpause = 23, // 
      CRAmapping = 24, // 
      CRAfan = 27,
      PRAWaferDetect = 33, // 
      ARMpause = 34, // 
      COT1Spinchuckvacsensor = 36, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      COT1Arm1upsensor = 37, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Arm1downsensor = 38, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Arm2upsensor = 39, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Arm2downsensor = 40, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Spinstopswitch = 41, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Exhaustpressuresensor = 42, // Board Type(string)
                                                                                    // Channel(int)
                                                                                    // Board ID(int)
                                                                                    // Index(int)
      COT1SpinchuckDown = 43, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Door = 44, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // Index(int)
      COT1Nozzle1sensor = 45, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Nozzle2sensor = 46, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Nozzle3sensor = 47, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Nozzle4sensor = 48, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1ResistLeak = 49, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      COT1WastewaterLevelLow = 50,
      COT1RRCflowmeter = 51, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1WastewaterLeak = 52,
      COT1Fan1 = 54, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // Index(int)
      COT1EBRflowmeter = 56, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Backrinseflowmeter = 57, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      DEV1Spinchuckvacsensor = 58, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      DEV1Spinstopswitch = 59, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV1Exhaustpressuresensor = 60, // Board Type(string)
                                                                                    // Channel(int)
                                                                                    // Board ID(int)
                                                                                    // Index(int)
      DEV2SpinchuckDown = 61,
      DEV1SpinchuckUp = 64, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV1Arm1upsensor = 65, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV1Arm1downsensor = 66, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV1Arm2upsensor = 67, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV1Arm2downsensor = 68, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV2Spinchuckvacsensor = 70, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      DEV2Spinstopswitch = 71, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV2Exhaustpressuresensor = 72, // Board Type(string)
                                                                                    // Channel(int)
                                                                                    // Board ID(int)
                                                                                    // Index(int)
      DEV2SpinchuckUp = 76, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV2Arm1upsensor = 77, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV2Arm1downsensor = 78, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV2Arm2upsensor = 79, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV2Arm2downsensor = 80, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      CB01PinUp = 82, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
                                                                    // ModuleNo(int)
      CB01PinDown = 83, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
                                                                      // ModuleNo(int)
      CB01Magnet = 84, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
                                                                     // ModuleNo(int)
      CB02PinUp = 85, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
                                                                    // ModuleNo(int)
      CB02PinDown = 86, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
                                                                      // ModuleNo(int)
      CB02Magnet = 87, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
                                                                     // ModuleNo(int)
      CB03PinUp = 88, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
                                                                    // ModuleNo(int)
      CB03PinDown = 89, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
                                                                      // ModuleNo(int)
      CB03Magnet = 90, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
                                                                     // ModuleNo(int)
      CB04PinUp = 91, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB04PinDown = 92, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB04Magnet = 93, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB05PinUp = 94, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB05PinDown = 95, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB05Magnet = 96, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB06PinUp = 97, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB06PinDown = 98, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB06Magnet = 99, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB07PinUp = 100, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB07PinDown = 101, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB07Magnet = 102, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB08PinUp = 103, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB08PinDown = 104, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB08Magnet = 105, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB09PinUp = 106, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB09PinDown = 107, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB09Magnet = 108, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB10PinUp = 109, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB10PinDown = 110, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB10Magent = 111, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB11PinUp = 112, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB11PinDown = 113, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB11Magent = 114, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB12PinUp = 115, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB12PinDown = 116, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB12Magnet = 117, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      COT1SpinchuckUp = 118,
      Solvent_BufferTank1_Overload = 127,
      Solvent_BufferTank1_High = 128,
      Solvent_BufferTank1_Mid = 129,
      Solvent_BufferTank1_Low = 130,
      Develop_BufferTank1_Overload = 135,
      Develop_BufferTank1_High = 136,
      Develop_BufferTank1_Mid = 137,
      Develop_BufferTank1_Low = 138,
      Solvent_BufferTank2_Overload = 139,
      Solvent_BufferTank2_High = 140,
      Solvent_BufferTank2_Mid = 141,
      Solvent_BufferTank2_Low = 142,
      Develop_BufferTank2_Overload = 143,
      Develop_BufferTank2_High = 144,
      Develop_BufferTank2_Mid = 145,
      Develop_BufferTank2_Low = 146,
      DEV1CupDownsensor = 154,
      DEV2DevelopFlowmeter = 155,
      DEV2RinseFlowmeter = 156,
      DEV2BackrinseFlowmeter = 157,
      DEV2CupUpsensor = 158,
      DEV2CupDownsensor = 159,
      DEV1WastewaterLevelHigh = 160,
      DEV1WastewaterLevelMid = 161,
      DEV1WastewaterLevelLow = 162,
      DEV1Door = 163,
      DEV2Door = 164,
      DEV1SpinchuckDown = 165,
      DEV1Arm2insensor = 166,
      DEV1Arm2outsensor = 167,
      DEV2Arm2insensor = 168,
      DEV2Arm2outsensor = 169,
      COT1Fan2 = 170,
      COT1Fan3 = 171,
      COT1Fan4 = 172,
      COT1Fan5 = 173,
      COT1WastewaterLevelHigh = 174,
      COT1WastewaterLevelMid = 175,
      DEV1DevelopFlowmeter = 176,
      DEV1RinseFlowmeter = 177,
      DEV1BackrinseFlowmeter = 178,
      DEV1CupUpsensor = 179,
      DEV1WastewaterLeak = 180,
      DrainEXH = 181,
      DrainMainAir = 182,
      DrainBucketAUpDetect = 183,
      DrainBucketADownDetect = 184,
      DrainBucketBUpDetect = 185,
      DrainBucketBDownDetect = 186,
      DrainLeak = 187,
      COT1Safety = 189,
      DEV1Safety = 190,
      DEV2Safety = 191,
   };

   public enum EnumOutput {
      MappingCYL = 0, // Mapping CYL operation
      LiftpinUpDown = 1, // CRA pin up/down
      CST1carrierled = 2, // 
      CST1standbyled = 3, // 
      CST1runningled = 4, // 
      CST1finishedled = 5, // 
      CST2carrierled = 6, // 
      CST2standbyled = 7, // 
      CST2runningled = 8, // 
      CST2finishedled = 9, // 
      CST3carrierled = 10, // 
      CST3standbyled = 11, // 
      CST3runningled = 12, // 
      CST3finishedled = 13, // 
      CST4carrierled = 14, // 
      CST4standbyled = 15, // 
      CST4runningled = 16, // 
      CST4finishedled = 17, // 
      CST1StopSWLed = 18,
      CST1StartSWLed = 19,
      COT1Resist1valve = 20, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Resist2valve = 21, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Resist3valve = 22, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1EBRvalve = 23, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      COT1Solventbathvalve = 24, // Board Type(string)
                                                                               // Channel(int)
                                                                               // Board ID(int)
                                                                               // Index(int)
      COT1Resist4valve = 25,
      COT1Arm1LockUnlock = 26, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Arm1Up = 27, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(int)
                                                                     // Index(int)
      COT1SpinchuckUp = 28, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      COT1Backrinse2valve = 29,
      COT1Arm2UpDown = 31, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      COT1SpinchuckVacOnOff = 34, // Board Type(string)
                                                                                // Channel(int)
                                                                                // Board ID(int)
                                                                                // Index(int)
      DEV1Rinsevalve = 35, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      DEV1DevValve = 36, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      DEV1Arm1Up = 37, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(int)
                                                                     // Index(int)
      DEV1CupUp = 39, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(int)
                                                                    // Index(int)
      DEV1SpinchuckUp = 40, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV1AutodamperOpenClose = 41, // Board Type(string)
                                                                                  // Channel(int)
                                                                                  // Board ID(int)
                                                                                  // Index(int)
      DEV1SpinchuckVacOnOff = 42, // Board Type(string)
                                                                                // Channel(int)
                                                                                // Board ID(int)
                                                                                // Index(int)
      DEV1Arm2UpDown = 43, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      DEV2Rinsevalve = 44, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      DEV2DevValve = 45, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      DEV2Arm1Down = 46, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      DEV2CupUp = 48, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(int)
                                                                    // Index(int)
      DEV2SpinchuckUp = 49, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV2AutodamperOpenClose = 50, // Board Type(string)
                                                                                  // Channel(int)
                                                                                  // Board ID(int)
                                                                                  // Index(int)
      DEV2SpinchuckVacOnOff = 51, // Board Type(string)
                                                                                // Channel(int)
                                                                                // Board ID(int)
                                                                                // Index(int)
      DEV2Arm2UpDown = 52, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(hex)
                                                                         // Index(int)
                                                                         // ModuleNo(int)
      CB01Door = 53,
      CB02Door = 54,
      CB03Door = 55,
      CB04Door = 56,
      CB05Door = 57,
      CB06Door = 58,
      CB07Door = 59,
      CB08Door = 60,
      CB09Door = 61,
      CB10Door = 62,
      CB11Door = 63,
      CB12Door = 64,
      COT1Arm1Down = 65,
      COT1SpinchuckDown = 66,
      DEV1Arm1Down = 67,
      DEV1SpinchuckDown = 68,
      DEV2SpinchuckDown = 69,
      DEV2Arm1Up = 70,
      Solvent_BufferTank1_Supply = 73,
      Solvent_BufferTank1_Press = 74,
      Solvent_BufferTank1_Drain = 75,
      Solvent_BufferTank2_Supply = 76,
      Solvent_BufferTank2_Drain = 77,
      Solvent_BufferTank2_Press = 78,
      Solvent_BufferTank_Switch = 79,
      Develop_BufferTank1_Supply = 81,
      Develop_BufferTank1_Press = 82,
      Develop_BufferTank1_Drain = 83,
      Develop_BufferTank2_Supply = 84,
      Develop_BufferTank2_Press = 85,
      Develop_BufferTank2_Drain = 86,
      Develop_BufferTank_Switch = 87,
      COT1RRCvalve = 92,
      DEV1Arm2InOut = 93,
      DEV2Arm2InOut = 94,
      DEV1CupDown = 95,
      DEV1Backrinsevalve = 96,
      DEV1Bubblerelease = 97,
      DEV2CupDown = 98,
      DEV2Bubblerelease = 99,
      DEV2Backrinsevalve = 100,
      CST2StartSWLed = 101,
      CST2StopSWLed = 102,
      CST3StartSWLed = 103,
      CST3StopSWLed = 104,
      CST4StartSWLed = 105,
      CST4StopSWLed = 106,
      TowerLampRed = 107,
      TowerLampYellow = 108,
      TowerLampGreen = 109,
      Buzzer = 110,
      COT1SpinStopSWLamp = 111,
      COT1PauseSWLamp = 112,
      DEV1SpinStopSWLamp = 113,
      DEV1PauseSWLamp = 114,
      DEV2SpinStopSWLamp = 115,
      DEV2PauseSWLamp = 116,
      DrainBucketALed = 117,
      DrainBucketBLed = 118,
      DrainCoverA = 119,
      DrainCoverB = 120,
      DrainPumpA = 121,
      DrainPumpB = 122,
      DrainValveA = 123,
      DrainValveB = 124,
      COT1Backrinse1valve = 125,
      COT1Safety = 126,
      DEV1Safety = 127,
      DEV2Safety = 128,
   };

   public enum EnumAIO {
   };

   public enum EnumActuator {
      MappingCYL = 0,
      PinCYL = 1,
   };

   public enum EnumActuatorAction {
      ON,
      OFF,
      ACTIVATE,
      DEACTIVATE,
      FWD,
      BWD,
      FRONT,
      REAR,
      OPEN,
      CLOSE,
      UP,
      DOWN,
      LEFT,
      RIGHT,
      CW,
      CCW,
      GRIP,
      RELEASE,
      LOCK,
      UNLOCK,
      Activate,
      Deactivate,
   };

   public enum EnumCustom {
      Chamber = 0, // type
                                                                  // ADH, HHP, LHP, CPL이 있음. 이 종류는 Config로 정의
                                                                  // 
      Developer = 2,
      Coater = 3,
      Interface = 4, // WEE와 Exposure두개를 처리 한다.
   };

   public enum EnumCustomType {
      CUSTOM,
   };

   public enum EnumCommand {
      Action = 10000,
      Setting = 10001, // Reserved
                                                                  // 
      Status = 10002,
      Alarm = 10003, // alarm occured msg(TYPE:ITEM,contents)
                                                                // ex msg) LM:LM1,is failed
                                                                // 
      Warning = 10004,
      Config = 10005, // when program config changed
                                                                 // ex msg) groupname:itemname
                                                                 // 
   };

   public enum EnumCommand_Action {
      Move___MiniMotorOriginMove,  // Motor:MotorName:BlockNo:ModuleNo
                                      // 
                                      // 미니스텝모터에만 적용한다.
                                      // 
                                      // 모터이름 알수 가 없다.
      Move___Stop,  // Motor:Name,Don't Care
      Move___TeachPos,  // Motor:Name,TeachName
      StatusChange___ServoOn,  // Motor:Name,true/false
      StatusChange___Clear,  // Motor:Name,Don't Care
      NormalAction___DoAction,  // UnitID:Name
      Door___DoAction,  // ON OFF
      Request___Initialize,  // Initial할지 묻고 응답을 받는다
                                // Do/Done/Ask
      Request___Lot,  // Lot을 진행할지 묻고 답한다.
                         // Book, Start, Clear, End
      Request___BuzzerOff,  // Buzzer를 Off하라고 한다
      TermManual___Do,  // Terminal manual을 call한다. msg ex) Shaker Shaking_Do
      TermManual___Result,  // Terminal manual결과를 준다.
      Lot___Reqeust,  // Lot을 만들라고 명령하던지 지우라고 명령한다 ex) Make/Delete/ForceEnd
      NormalAction___SimTime,  // inc or dec
      Move___PitchMove,  // Motor:Name,Direction,Pitch
      Move___EncoderPos,  // Motor:Name   -> Request
                             // Motor:Name,Pos -> Response
      StatusChange___EncoderClear,  // Motor:Name
      StatusChange___ServoAlarmClear,  // Motor:Name
      Chamber___UnLoad,  // Chamber:BlockNo:ModuleNo
      StatusChange___MotorAxisRequest,  // MOTOR:NAME
                                           // (UI에 나타난 CAN MOTOR)
      IO___ManualToggle,  // IO:Name
      StatusChange___IODoRequest,  // IO:TRUE/FALSE
      StatusChange___MotorDoRequest,  // MOTOR:TRUE/FALSE
                                         // (CAN Motor)
      Move___ModuleOriginMove,  // Module:ModuleName,BlockNo,ModuleNo
      Machine___Run,  // Run:RecoveryStop:Stop
      Chamber___PutReady,  // Chamber:BlockNo:ModuleNo:JobFileName
                              // 
                              // MCS->Chamber
      Chamber___GetReady,  // Chamber:BlockNo:ModuleNo
                              // 
                              // MCS->Chamber
      Cassette___Scan,  // Foup:Index
                           // 
                           // UI->MCS
      Cassette___MapData,  // Foup:Index
                              // 
                              // UI->MCS
      ChamberManual___Run,  // Chamber:BlockNo:ModuleNo:ZoneIndex
                               // 
                               // MiniStep 보드만 적용
      ChamberManual___Stop,  // Chamber:BlockNo:ModuleNo:ZoneIndex
                                // 
                                // MiniStep 보드만 적용
      ChamberManual___AutoTuning,  // Chamber:BlockNo:ModuleNo:ZoneIndex
                                      // 
                                      // MiniStep 보드만 적용
      ChamberManual___PinHome,  // Chamber:BlockNo:ModuleNo
                                   // 
                                   // MiniStep 보드만 적용
      ChamberManual___PinReady,  // Chamber:BlockNo:ModuleNo
                                    // 
                                    // MiniStep 보드만 적용
      ChamberManual___PinDown,  // Chamber:BlockNo:ModuleNo
                                   // 
                                   // MiniStep 보드만 적용
      ChamberManual___PinUp,  // Chamber:BlockNo:ModuleNo
                                 // 
                                 // MiniStep 보드만 적용
      ChamberManual___ServoOn,  // Chamber:BlockNo:ModuleNo
                                   // 
                                   // MiniStep 보드만 적용
      ChamberManual___ServoOff,  // Chamber:BlockNo:ModuleNo
                                    // 
                                    // MiniStep 보드만 적용
      ChamberManual___ShutterOpen,  // Chamber:BlockNo:ModuleNo
                                       // 
                                       // MiniStep 보드만 적용
      ChamberManual___ShutterClose,  // Chamber:BlockNo:ModuleNo
                                        // 
                                        // MiniStep 보드만 적용
      ChamberManual___SetTemperature,  // Chamber:BlockNo:ModuleNo:ZoneIndex:Temp
                                          // 
                                          // MiniStep 보드만 적용
      StatusChange___ChamberDoRequest,  // Chamber:TRUE/FALSE
                                           // (MINI Board)
      ChamberManual___ChamberState,  // Chamber:BlockNo:ModuleNo
                                        // 
                                        // MiniStep 보드만 적용
      ChamberManual___MoveStop,  // Chamber:BlockNo:ModuleNo
                                    // 
                                    // MiniStep 보드만 적용
      ChamberManual___JogMove,  // Chamber:BlockNo:ModuleNo:CW/CCW
                                   // 
                                   // 속도는 일정하다
      ChamberManual___PitchMove,  // Chamber:BlockNo:ModuleNo:Pitch
      StatusChange___MonitoringDoRequest,  // MONITORING:TRUE/FALSE
      ChamberManual___DoManual,  // CHAMBER:(TRUE/FALSE)
      Move___DirectMove,  // Motor:Name,Position,Speed,Acc,Dec,Timeout
      Move___RelativeMove,  // Motor:Name,Position,Speed,Acc,Dec,Timeout
      Move___JogMove,  // Motor:Name,Speed,Acc,Dec
      Move___OriginMove,  // Motor:Name,Don't Care
   };

   public enum EnumCommand_Setting {
      Send___Send,
   };

   public enum EnumCommand_Status {
      UnitStatus___MiniBoardState,  // Mini:BlockNo:ModuleNo:CurTemp:SetTemp:IsMoving:IsLimitM:IsLimitP:IsHomeOK:GetPos
      UnitStatus___SendStop,
      UnitStatus___SendStart,  // Request unit status for display
      UnitStatus___Result,
      RunStatus___Request,  // MACHINE;ASPE;IsRun
      RunStatus___Result,  // MACHINE;ASPE;IsIdle,LM;ABC;IsAlarm
      UnitStatus___MiniBoardIOState,  // AFADFDFDFFDFDFDFD ~32 (DI)
                                         // AFDFDFDFSFDSFDFD ~32 (DO)
      DATA___ChamberMonitoringData,  // PV
                                        // SV
      DATA___RequestAll,  // reqeust to send machine data all
      MCS___Data,  // DataName,abc;c;d;e,def;g;j
      MCS___DataFile,  // DataType|FileName
      MCS___HeartBeat,  // User defined data send
      MCS___LotStatus,  // Send Lot Status
      MCS___SerialData,  // Send Serial Data
      MCS___ActorInfo,  // Send Actor Information
      UnitStatus___DIState,  // DI:State
                                // IO:11010FFFF...
      UnitStatus___DOState,  // DO:State
                                // IO:11010FFFF...
      UnitStatus___MotorState,  // Motor:Name
                                   // 
                                   // Motor:Name,IsServoOn,IsAlarm,IsStop,IsMotion,IsInposition,IsPlusLimit,IsPlusHome,IsMinusLimit,IsMinusHome,IsHomming,CurPos,CmdPos
                                   // Motor:D1_X1,1,0,0,1,0,0,0,0,0,1,21.530,150
      Chamber___InitialResult,  // Assy:Chamber:BlockNo:ModuleNo:(IsNot/IsNeed/IsDoing/IsDone)
      Chamber___OriginMove,  // Chamber:AxisID:(IsDone:IsNot:IsDoing:IsDoneFile)
      Chamber___PutReady,  // Chamber:BlockNo:ModuleNo:(IsDone / IsNot / IsDoing / IsDoneFail)
                              // 
                              // Chamber->MCS
      Chamber___GetReady,  // Chamber:BlockNo:ModuleNo:(IsDone / IsNot / IsDoing)
                              // 
                              // Chamber->MCS
      Chamber___StartProcess,  // Chamber:BlockNo:ModuleNo
                                  // 
                                  // MCS->Chamber
      Chamber___EndProcess,  // Chamber:BlockNo:ModuleNo
                                // 
                                // Chamber->MCS
      UnitStatus___ChamberState,  // Chamber:BlockNo:ModuleNo:State
                                     // 
                                     // Chamber->MCS/UI
      Cassette___Scan,  // Foup:Index:(IsDone / IsNot / IsDoing / IsDoneFail)
                           // 
                           // MCS->UI
      Cassette___MapData,  // Foup:Index:1111111111111111111111111
                              // 
                              // MCS->UI
      MCS___InitStep,  // Send Init Information ex) LM:AAA:IsDone
   };

   public enum EnumCommand_Alarm {
      Request___AlarmSet,
      Request___AlarmClear,  // Code:Part:Param
   };

   public enum EnumCommand_Warning {
      Send___Set,  // IDString,메세지
      Send___Clear,  // IDString
   };

   public enum EnumCommand_Config {
   };

   public enum EnumConfigGroup {
      Environment,
      Lot,
      Motor_C1_BT,
      Motor_C1_X1,
      Motor_C1_X2,
      Motor_CB01_Pin,
      Motor_CB02_Pin,
      Motor_CB03_Pin,
      Motor_CB04_Pin,
      Motor_CB05_Pin,
      Motor_CB06_Pin,
      Motor_CB07_Pin,
      Motor_CB08_Pin,
      Motor_CB09_Pin,
      Motor_CB10_Pin,
      Motor_CB11_Pin,
      Motor_CB12_Pin,
      Motor_CRA_X,
      Motor_CRA_Y,
      Motor_CRA_Z,
      Motor_D1_X1,
      Motor_D2_X1,
      Motor_PRA_T,
      Motor_PRA_X1,
      Motor_PRA_X2,
      Motor_PRA_X3,
      Motor_PRA_Y,
      Motor_PRA_Z,
      PRA_Parameter,
      Motor_C1_SPIN,
      Motor_D1_SPIN,
      Motor_D2_SPIN,
      SystemChamber,
      Motor_C1_PP2,
      Motor_C1_PP1,
      Motor_C1_PP3,
   };

   public enum EnumConfig_Environment {
      Operation,  // DryMode, Interlock
      TowerLamp,  // O(On) X(OFF) T(Toggle)
                     // RYGB(red,yellow,green,buzzer)
      ChamberInfo,  // 첫번째 부터 차례대로 정의
                       // Index, Type, BlockNo, ModuleNo, Use(true/false)
                       // 사용하지 않으면 띄우기
      CoaterInfo,  // Index, BlockNo, ModuleNo, Use(true/false)
      DeveloperInfo,  // Index, BlockNo, ModuleNo, Use(true/false)
      InterfaceInfo,  // WEE
                         // Exposure
      RecipeTransperInfo,  // Recipe를 준비하기 위해 레시피를 보낸다.
                              // UI->Chamber
      DummyLinkRecipeInfo,  // Dummy Recipe 전송
                               // 
                               // UI->Chamber
      Cassette,
   };

   public enum EnumConfig_Lot {
      Job,  // 1,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,
               // 2,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,
               // 
               // 1,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS
               // 2,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS
               // 
      LotInfo,
   };

   public enum EnumConfig_Motor_C1_BT {
      Teaching_PosNozzle1,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosNozzle2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosNozzle3,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosNozzle4,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_C1_X1 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosBegin,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosEnd,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense1,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense3,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense4,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense5,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_C1_X2 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosBegin,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosEnd,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense1,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense3,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense4,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense5,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosWaferEdge,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB01_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB02_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB03_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB04_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB05_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB06_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB07_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB08_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB09_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB10_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB11_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CB12_Pin {
      Teaching_PosUp,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDown,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosMid,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosReady,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_CRA_X {
      Teaching_TrsPos,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_GetPosTop__0,
      Teaching_GetPosTop__1,
      Teaching_GetPosTop__2,
      Teaching_GetPosTop__3,
      Teaching_GetPosBottom__0,
      Teaching_GetPosBottom__1,
      Teaching_GetPosBottom__2,
      Teaching_GetPosBottom__3,
      Teaching_ScanPos__0,
      Teaching_ScanPos__1,
      Teaching_ScanPos__2,
      Teaching_ScanPos__3,
   };

   public enum EnumConfig_Motor_CRA_Y {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_GetPos__0,
      Teaching_GetPos__1,
      Teaching_GetPos__2,
      Teaching_GetPos__3,
      Teaching_PutPos__0,
      Teaching_PutPos__1,
      Teaching_PutPos__2,
      Teaching_PutPos__3,
      Teaching_ScanPos__0,  // test
      Teaching_ScanPos__1,  // test
      Teaching_ScanPos__2,  // test
      Teaching_ScanPos__3,  // test
   };

   public enum EnumConfig_Motor_CRA_Z {
      Teaching_TrsPos,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_TopPos__0,
      Teaching_TopPos__1,
      Teaching_TopPos__2,
      Teaching_TopPos__3,
      Teaching_BottomPos__0,
      Teaching_BottomPos__1,
      Teaching_BottomPos__2,
      Teaching_BottomPos__3,
      Teaching_ScanPos__0,  // 첫번째 wafer 감지후 , 감지 안되는 위치로 천천히 내림
      Teaching_ScanPos__1,  // 첫번째 wafer 감지후 , 감지 안되는 위치로 천천히 내림
      Teaching_ScanPos__2,  // 첫번째 wafer 감지후 , 감지 안되는 위치로 천천히 내림
      Teaching_ScanPos__3,  // 첫번째 wafer 감지후 , 감지 안되는 위치로 천천히 내림
   };

   public enum EnumConfig_Motor_D1_X1 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosBegin,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosEnd,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense1,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense3,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense4,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense5,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_D2_X1 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosBegin,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosEnd,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense1,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense3,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense4,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosDispense5,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PosCenter2,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
   };

   public enum EnumConfig_Motor_PRA_T {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PR_Chamber__0,
      Teaching_PR_Chamber__1,
      Teaching_PR_Chamber__2,
      Teaching_PR_Chamber__3,
      Teaching_PR_Chamber__4,
      Teaching_PR_Chamber__5,
      Teaching_PR_Chamber__6,
      Teaching_PR_Chamber__7,
      Teaching_PR_Chamber__8,
      Teaching_PR_Chamber__9,
      Teaching_PR_Chamber__10,
      Teaching_PR_Chamber__11,
      Teaching_PR_Chamber__12,
      Teaching_PR_Chamber__13,
      Teaching_PR_Chamber__14,
      Teaching_PR_Chamber__15,
      Teaching_PR_Chamber__16,
      Teaching_PR_Chamber__17,
      Teaching_PR_Chamber__18,
      Teaching_PR_Chamber__19,
      Teaching_PR_Chamber__20,
      Teaching_PR_Chamber__21,
      Teaching_PR_Chamber__22,
      Teaching_PR_Chamber__23,
      Teaching_PR_Chamber__24,
   };

   public enum EnumConfig_Motor_PRA_X1 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PR_X1_GetChamber__0,
      Teaching_PR_X1_GetChamber__1,
      Teaching_PR_X1_GetChamber__2,
      Teaching_PR_X1_GetChamber__3,
      Teaching_PR_X1_GetChamber__4,
      Teaching_PR_X1_GetChamber__5,
      Teaching_PR_X1_GetChamber__6,
      Teaching_PR_X1_GetChamber__7,
      Teaching_PR_X1_GetChamber__8,
      Teaching_PR_X1_GetChamber__9,
      Teaching_PR_X1_GetChamber__10,
      Teaching_PR_X1_GetChamber__11,
      Teaching_PR_X1_GetChamber__12,
      Teaching_PR_X1_GetChamber__13,
      Teaching_PR_X1_GetChamber__14,
      Teaching_PR_X1_GetChamber__15,
      Teaching_PR_X1_GetChamber__16,
      Teaching_PR_X1_GetChamber__17,
      Teaching_PR_X1_GetChamber__18,
      Teaching_PR_X1_GetChamber__19,
      Teaching_PR_X1_GetChamber__20,
      Teaching_PR_X1_GetChamber__21,
      Teaching_PR_X1_GetChamber__22,
      Teaching_PR_X1_GetChamber__23,
      Teaching_PR_X1_GetChamber__24,
      Teaching_PR_X1_PutChamber__0,
      Teaching_PR_X1_PutChamber__1,
      Teaching_PR_X1_PutChamber__2,
      Teaching_PR_X1_PutChamber__3,
      Teaching_PR_X1_PutChamber__4,
      Teaching_PR_X1_PutChamber__5,
      Teaching_PR_X1_PutChamber__6,
      Teaching_PR_X1_PutChamber__7,
      Teaching_PR_X1_PutChamber__8,
      Teaching_PR_X1_PutChamber__9,
      Teaching_PR_X1_PutChamber__10,
      Teaching_PR_X1_PutChamber__11,
      Teaching_PR_X1_PutChamber__12,
      Teaching_PR_X1_PutChamber__13,
      Teaching_PR_X1_PutChamber__14,
      Teaching_PR_X1_PutChamber__15,
      Teaching_PR_X1_PutChamber__16,
      Teaching_PR_X1_PutChamber__17,
      Teaching_PR_X1_PutChamber__18,
      Teaching_PR_X1_PutChamber__19,
      Teaching_PR_X1_PutChamber__20,
      Teaching_PR_X1_PutChamber__21,
      Teaching_PR_X1_PutChamber__22,
      Teaching_PR_X1_PutChamber__23,
      Teaching_PR_X1_PutChamber__24,
   };

   public enum EnumConfig_Motor_PRA_X2 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PR_X2_PutChamber__0,
      Teaching_PR_X2_PutChamber__1,
      Teaching_PR_X2_PutChamber__2,
      Teaching_PR_X2_PutChamber__3,
      Teaching_PR_X2_PutChamber__4,
      Teaching_PR_X2_PutChamber__5,
      Teaching_PR_X2_PutChamber__6,
      Teaching_PR_X2_PutChamber__7,
      Teaching_PR_X2_PutChamber__8,
      Teaching_PR_X2_PutChamber__9,
      Teaching_PR_X2_PutChamber__10,
      Teaching_PR_X2_PutChamber__11,
      Teaching_PR_X2_PutChamber__12,
      Teaching_PR_X2_PutChamber__13,
      Teaching_PR_X2_PutChamber__14,
      Teaching_PR_X2_PutChamber__15,
      Teaching_PR_X2_PutChamber__16,
      Teaching_PR_X2_PutChamber__17,
      Teaching_PR_X2_PutChamber__18,
      Teaching_PR_X2_PutChamber__19,
      Teaching_PR_X2_PutChamber__20,
      Teaching_PR_X2_PutChamber__21,
      Teaching_PR_X2_PutChamber__22,
      Teaching_PR_X2_PutChamber__23,
      Teaching_PR_X2_PutChamber__24,
      Teaching_PR_X2_GetChamber__0,
      Teaching_PR_X2_GetChamber__1,
      Teaching_PR_X2_GetChamber__2,
      Teaching_PR_X2_GetChamber__3,
      Teaching_PR_X2_GetChamber__4,
      Teaching_PR_X2_GetChamber__5,
      Teaching_PR_X2_GetChamber__6,
      Teaching_PR_X2_GetChamber__7,
      Teaching_PR_X2_GetChamber__8,
      Teaching_PR_X2_GetChamber__9,
      Teaching_PR_X2_GetChamber__10,
      Teaching_PR_X2_GetChamber__11,
      Teaching_PR_X2_GetChamber__12,
      Teaching_PR_X2_GetChamber__13,
      Teaching_PR_X2_GetChamber__14,
      Teaching_PR_X2_GetChamber__15,
      Teaching_PR_X2_GetChamber__16,
      Teaching_PR_X2_GetChamber__17,
      Teaching_PR_X2_GetChamber__18,
      Teaching_PR_X2_GetChamber__19,
      Teaching_PR_X2_GetChamber__20,
      Teaching_PR_X2_GetChamber__21,
      Teaching_PR_X2_GetChamber__22,
      Teaching_PR_X2_GetChamber__23,
      Teaching_PR_X2_GetChamber__24,
   };

   public enum EnumConfig_Motor_PRA_X3 {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PR_X3_PutChamber__0,
      Teaching_PR_X3_PutChamber__1,
      Teaching_PR_X3_PutChamber__2,
      Teaching_PR_X3_PutChamber__3,
      Teaching_PR_X3_PutChamber__4,
      Teaching_PR_X3_PutChamber__5,
      Teaching_PR_X3_PutChamber__6,
      Teaching_PR_X3_PutChamber__7,
      Teaching_PR_X3_PutChamber__8,
      Teaching_PR_X3_PutChamber__9,
      Teaching_PR_X3_PutChamber__10,
      Teaching_PR_X3_PutChamber__11,
      Teaching_PR_X3_PutChamber__12,
      Teaching_PR_X3_PutChamber__13,
      Teaching_PR_X3_PutChamber__14,
      Teaching_PR_X3_PutChamber__15,
      Teaching_PR_X3_PutChamber__16,
      Teaching_PR_X3_PutChamber__17,
      Teaching_PR_X3_PutChamber__18,
      Teaching_PR_X3_PutChamber__19,
      Teaching_PR_X3_PutChamber__20,
      Teaching_PR_X3_PutChamber__21,
      Teaching_PR_X3_PutChamber__22,
      Teaching_PR_X3_PutChamber__23,
      Teaching_PR_X3_PutChamber__24,
      Teaching_PR_X3_GetChamber__0,
      Teaching_PR_X3_GetChamber__1,
      Teaching_PR_X3_GetChamber__2,
      Teaching_PR_X3_GetChamber__3,
      Teaching_PR_X3_GetChamber__4,
      Teaching_PR_X3_GetChamber__5,
      Teaching_PR_X3_GetChamber__6,
      Teaching_PR_X3_GetChamber__7,
      Teaching_PR_X3_GetChamber__8,
      Teaching_PR_X3_GetChamber__9,
      Teaching_PR_X3_GetChamber__10,
      Teaching_PR_X3_GetChamber__11,
      Teaching_PR_X3_GetChamber__12,
      Teaching_PR_X3_GetChamber__13,
      Teaching_PR_X3_GetChamber__14,
      Teaching_PR_X3_GetChamber__15,
      Teaching_PR_X3_GetChamber__16,
      Teaching_PR_X3_GetChamber__17,
      Teaching_PR_X3_GetChamber__18,
      Teaching_PR_X3_GetChamber__19,
      Teaching_PR_X3_GetChamber__20,
      Teaching_PR_X3_GetChamber__21,
      Teaching_PR_X3_GetChamber__22,
      Teaching_PR_X3_GetChamber__23,
      Teaching_PR_X3_GetChamber__24,
   };

   public enum EnumConfig_Motor_PRA_Y {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PR_Chamber__0,
      Teaching_PR_Chamber__1,
      Teaching_PR_Chamber__2,
      Teaching_PR_Chamber__3,
      Teaching_PR_Chamber__4,
      Teaching_PR_Chamber__5,
      Teaching_PR_Chamber__6,
      Teaching_PR_Chamber__7,
      Teaching_PR_Chamber__8,
      Teaching_PR_Chamber__9,
      Teaching_PR_Chamber__10,
      Teaching_PR_Chamber__11,
      Teaching_PR_Chamber__12,
      Teaching_PR_Chamber__13,
      Teaching_PR_Chamber__14,
      Teaching_PR_Chamber__15,
      Teaching_PR_Chamber__16,
      Teaching_PR_Chamber__17,
      Teaching_PR_Chamber__18,
      Teaching_PR_Chamber__19,
      Teaching_PR_Chamber__20,
      Teaching_PR_Chamber__21,
      Teaching_PR_Chamber__22,
      Teaching_PR_Chamber__23,
      Teaching_PR_Chamber__24,
   };

   public enum EnumConfig_Motor_PRA_Z {
      Teaching_PosHome,  // doubleList type =>  position, speed, accelerate, decelerate, moving time out
      Teaching_PR_X1_GetChamber__0,
      Teaching_PR_X1_GetChamber__1,
      Teaching_PR_X1_GetChamber__2,
      Teaching_PR_X1_GetChamber__3,
      Teaching_PR_X1_GetChamber__4,
      Teaching_PR_X1_GetChamber__5,
      Teaching_PR_X1_GetChamber__6,
      Teaching_PR_X1_GetChamber__7,
      Teaching_PR_X1_GetChamber__8,
      Teaching_PR_X1_GetChamber__9,
      Teaching_PR_X1_GetChamber__10,
      Teaching_PR_X1_GetChamber__11,
      Teaching_PR_X1_GetChamber__12,
      Teaching_PR_X1_GetChamber__13,
      Teaching_PR_X1_GetChamber__14,
      Teaching_PR_X1_GetChamber__15,
      Teaching_PR_X1_GetChamber__16,
      Teaching_PR_X1_GetChamber__17,
      Teaching_PR_X1_GetChamber__18,
      Teaching_PR_X1_GetChamber__19,
      Teaching_PR_X1_GetChamber__20,
      Teaching_PR_X1_GetChamber__21,
      Teaching_PR_X1_GetChamber__22,
      Teaching_PR_X1_GetChamber__23,
      Teaching_PR_X1_GetChamber__24,
      Teaching_PR_X2_GetChamber__0,
      Teaching_PR_X2_GetChamber__1,
      Teaching_PR_X2_GetChamber__2,
      Teaching_PR_X2_GetChamber__3,
      Teaching_PR_X2_GetChamber__4,
      Teaching_PR_X2_GetChamber__5,
      Teaching_PR_X2_GetChamber__6,
      Teaching_PR_X2_GetChamber__7,
      Teaching_PR_X2_GetChamber__8,
      Teaching_PR_X2_GetChamber__9,
      Teaching_PR_X2_GetChamber__10,
      Teaching_PR_X2_GetChamber__11,
      Teaching_PR_X2_GetChamber__12,
      Teaching_PR_X2_GetChamber__13,
      Teaching_PR_X2_GetChamber__14,
      Teaching_PR_X2_GetChamber__15,
      Teaching_PR_X2_GetChamber__16,
      Teaching_PR_X2_GetChamber__17,
      Teaching_PR_X2_GetChamber__18,
      Teaching_PR_X2_GetChamber__19,
      Teaching_PR_X2_GetChamber__20,
      Teaching_PR_X2_GetChamber__21,
      Teaching_PR_X2_GetChamber__22,
      Teaching_PR_X2_GetChamber__23,
      Teaching_PR_X2_GetChamber__24,
      Teaching_PR_X3_GetChamber__0,
      Teaching_PR_X3_GetChamber__1,
      Teaching_PR_X3_GetChamber__2,
      Teaching_PR_X3_GetChamber__3,
      Teaching_PR_X3_GetChamber__4,
      Teaching_PR_X3_GetChamber__5,
      Teaching_PR_X3_GetChamber__6,
      Teaching_PR_X3_GetChamber__7,
      Teaching_PR_X3_GetChamber__8,
      Teaching_PR_X3_GetChamber__9,
      Teaching_PR_X3_GetChamber__10,
      Teaching_PR_X3_GetChamber__11,
      Teaching_PR_X3_GetChamber__12,
      Teaching_PR_X3_GetChamber__13,
      Teaching_PR_X3_GetChamber__14,
      Teaching_PR_X3_GetChamber__15,
      Teaching_PR_X3_GetChamber__16,
      Teaching_PR_X3_GetChamber__17,
      Teaching_PR_X3_GetChamber__18,
      Teaching_PR_X3_GetChamber__19,
      Teaching_PR_X3_GetChamber__20,
      Teaching_PR_X3_GetChamber__21,
      Teaching_PR_X3_GetChamber__22,
      Teaching_PR_X3_GetChamber__23,
      Teaching_PR_X3_GetChamber__24,
      Teaching_PR_X1_PutChamber__0,
      Teaching_PR_X1_PutChamber__1,
      Teaching_PR_X1_PutChamber__2,
      Teaching_PR_X1_PutChamber__3,
      Teaching_PR_X1_PutChamber__4,
      Teaching_PR_X1_PutChamber__5,
      Teaching_PR_X1_PutChamber__6,
      Teaching_PR_X1_PutChamber__7,
      Teaching_PR_X1_PutChamber__8,
      Teaching_PR_X1_PutChamber__9,
      Teaching_PR_X1_PutChamber__10,
      Teaching_PR_X1_PutChamber__11,
      Teaching_PR_X1_PutChamber__12,
      Teaching_PR_X1_PutChamber__13,
      Teaching_PR_X1_PutChamber__14,
      Teaching_PR_X1_PutChamber__15,
      Teaching_PR_X1_PutChamber__16,
      Teaching_PR_X1_PutChamber__17,
      Teaching_PR_X1_PutChamber__18,
      Teaching_PR_X1_PutChamber__19,
      Teaching_PR_X1_PutChamber__20,
      Teaching_PR_X1_PutChamber__21,
      Teaching_PR_X1_PutChamber__22,
      Teaching_PR_X1_PutChamber__23,
      Teaching_PR_X1_PutChamber__24,
      Teaching_PR_X2_PutChamber__0,
      Teaching_PR_X2_PutChamber__1,
      Teaching_PR_X2_PutChamber__2,
      Teaching_PR_X2_PutChamber__3,
      Teaching_PR_X2_PutChamber__4,
      Teaching_PR_X2_PutChamber__5,
      Teaching_PR_X2_PutChamber__6,
      Teaching_PR_X2_PutChamber__7,
      Teaching_PR_X2_PutChamber__8,
      Teaching_PR_X2_PutChamber__9,
      Teaching_PR_X2_PutChamber__10,
      Teaching_PR_X2_PutChamber__11,
      Teaching_PR_X2_PutChamber__12,
      Teaching_PR_X2_PutChamber__13,
      Teaching_PR_X2_PutChamber__14,
      Teaching_PR_X2_PutChamber__15,
      Teaching_PR_X2_PutChamber__16,
      Teaching_PR_X2_PutChamber__17,
      Teaching_PR_X2_PutChamber__18,
      Teaching_PR_X2_PutChamber__19,
      Teaching_PR_X2_PutChamber__20,
      Teaching_PR_X2_PutChamber__21,
      Teaching_PR_X2_PutChamber__22,
      Teaching_PR_X2_PutChamber__23,
      Teaching_PR_X2_PutChamber__24,
      Teaching_PR_X3_PutChamber__0,
      Teaching_PR_X3_PutChamber__1,
      Teaching_PR_X3_PutChamber__2,
      Teaching_PR_X3_PutChamber__3,
      Teaching_PR_X3_PutChamber__4,
      Teaching_PR_X3_PutChamber__5,
      Teaching_PR_X3_PutChamber__6,
      Teaching_PR_X3_PutChamber__7,
      Teaching_PR_X3_PutChamber__8,
      Teaching_PR_X3_PutChamber__9,
      Teaching_PR_X3_PutChamber__10,
      Teaching_PR_X3_PutChamber__11,
      Teaching_PR_X3_PutChamber__12,
      Teaching_PR_X3_PutChamber__13,
      Teaching_PR_X3_PutChamber__14,
      Teaching_PR_X3_PutChamber__15,
      Teaching_PR_X3_PutChamber__16,
      Teaching_PR_X3_PutChamber__17,
      Teaching_PR_X3_PutChamber__18,
      Teaching_PR_X3_PutChamber__19,
      Teaching_PR_X3_PutChamber__20,
      Teaching_PR_X3_PutChamber__21,
      Teaching_PR_X3_PutChamber__22,
      Teaching_PR_X3_PutChamber__23,
      Teaching_PR_X3_PutChamber__24,
   };

   public enum EnumConfig_PRA_Parameter {
      Stroke_CRA,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber01,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber00,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber02,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber03,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber04,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber05,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber06,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber07,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber08,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber09,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber10,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber11,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber12,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber13,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber14,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber15,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber16,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber17,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber18,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber19,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber20,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber21,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber22,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber23,  // BlockNo, ModuleNo, stroke(mm)
      Stroke_Chamber24,  // BlockNo, ModuleNo, stroke(mm)
   };

   public enum EnumConfig_Motor_C1_SPIN {
   };

   public enum EnumConfig_Motor_D1_SPIN {
   };

   public enum EnumConfig_Motor_D2_SPIN {
   };

   public enum EnumConfig_SystemChamber {
      TempControllerComNo,
      TemphumidityControllerComNo,
      DryRunMode,
      VelocityRatio,
      Cot_PR_DispTime,
      Dev_L_DispTime,  // 2
      Dev_R_DispTime,
      Cot_Dispense_Flag,
      Dev_L_Dispense_Flag,
      Dev_R_Dispense_Flag,
      Cot_Rinse_DispTime,
      Cot_BackRinse_DispTime,
      Cot_Pump_Dispense_Amout,
      Cot_Pump_Dispense_Accel,
      Cot_Pump_Dispense_Decel,
      Cot_Pump_Dispense_Rate,
      Cot_Pump_Reload_Rate,
      Cot_Pump_Calibration,
      Dev_L_Rinse_DispTime,
      Dev_L_BackRinse_DispTime,
      Dev_R_BackRinse_DispTime,
      Dev_R_Rinse_DispTime,
      Cot_Bath_IntervalTime,
      Cot_Bath_OperationTime,
      Cot_Bath_Sel_NozzleNo,
      Cot_Pump2_Calibration,
      Cot_Pump2_Dispense_Accel,
      Cot_Pump2_Dispense_Amout,
      Cot_Pump2_Dispense_Decel,
      Cot_Pump2_Dispense_Rate,
      Cot_Pump2_Reload_Rate,
      Cot_Pump3_Calibration,
      Cot_Pump3_Dispense_Accel,
      Cot_Pump3_Dispense_Amout,
      Cot_Pump3_Dispense_Decel,
      Cot_Pump3_Dispense_Rate,
      Cot_Pump3_Reload_Rate,
   };

   public enum EnumConfig_Motor_C1_PP2 {
      Teaching_PosHome,
   };

   public enum EnumConfig_Motor_C1_PP1 {
      Teaching_PosHome,
   };

   public enum EnumConfig_Motor_C1_PP3 {
      Teaching_PosHome,
   };

   public class DefineSet
   {
      public const string MACHINE_NAME = "SFETrack";
      public const string MACHINE_VERSION = "1.0.0.0";
      public static int GetEnumCount<TEnum>() { return Enum.GetValues(typeof(TEnum)).Length; }
   }
}
