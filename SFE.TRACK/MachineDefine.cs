///*************************************************************************///
/// Automatically generated C# machine definition
/// This file is generated by MachineMaster(1.0.1.11)
/// This file is generated at 2025-07-15 15:54
/// This file is for SFETrack(1.0.0.0) Chamber(1.0.0.0)
/// Make sure you must not change this file
/// Manual change is prohibited. "Don't change"
///*************************************************************************///


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace MachineDefine
{
   public enum EnumMachine {
      SFETrack = 0,
      Chamber = 1,
   };

   public enum Enum3rdParty {
      SFE_CAN = 0,
      AzinECAT = 1,
      ComizoaECAT = 2,
      Azin = 3,
      Comizoa = 4,
      VMX3 = 5,
   };

   public enum EnumHomeDir {
      Left = 0,
      Right = 1,
      Up = 2,
      Down = 3,
      Cw = 4,
      Ccw = 5,
      Fwd = 6,
      Bwd = 7,
      Narrow = 8,
      Wide = 9,
   };

   public enum EnumActuatorAction {
      On,
      Off,
      Activate,
      Deactivate,
      Fwd,
      Bwd,
      Front,
      Rear,
      Open,
      Close,
      Up,
      Down,
      Left,
      Right,
      Cw,
      Ccw,
      Grip,
      Release,
      Lock,
      Unlock,
      Forward,
      Backward,
   };

   public enum EnumCommand {
      Action = 10000,
      Setting = 10001, // Reserved
                                                                  // 
      Status = 10002,
      Alarm = 10003, // alarm occured msg(TYPE:ITEM,contents)
                                                                // ex msg) LM:LM1,is failed
                                                                // 
      Warning = 10004,
      Config = 10005, // when program config changed
                                                                 // ex msg) groupname:itemname
                                                                 // 
   };

   public enum EnumCommand_Action {
      Move__MiniMotorOriginMove,  // Motor:MotorName:BlockNo:ModuleNo
                                     // 
                                     // 미니스텝모터에만 적용한다.
                                     // 
                                     // 모터이름 알수 가 없다.
      Move__Stop,  // Motor:Name,Don't Care
      Move__TeachPos,  // Motor:Name,TeachName
      StatusChange__ServoOn,  // Motor:Name,true/false
      StatusChange__Clear,  // Motor:Name,Don't Care
      NormalAction__DoAction,  // UnitID:Name
      Door__DoAction,  // ON OFF
      Request__Initialize,  // Initial할지 묻고 응답을 받는다
                               // Do/Done/Ask
      Request__Lot,  // Lot을 진행할지 묻고 답한다.
                        // Book, Start, Clear, End
      Request__BuzzerOff,  // Buzzer를 Off하라고 한다
      TermManual__Do,  // Terminal manual을 call한다. msg ex) Shaker Shaking_Do
      TermManual__Result,  // Terminal manual결과를 준다.
      Lot__Reqeust,  // Lot을 만들라고 명령하던지 지우라고 명령한다 ex) Make/Delete/ForceEnd
      NormalAction__SimTime,  // inc or dec
      Move__PitchMove,  // Motor:Name,Direction,Pitch
      Move__EncoderPos,  // Motor:Name   -> Request
                            // Motor:Name,Pos -> Response
      StatusChange__EncoderClear,  // Motor:Name
      StatusChange__ServoAlarmClear,  // Motor:Name
      StatusChange__MotorAxisRequest,  // MOTOR:NAME
                                          // (UI에 나타난 CAN MOTOR)
      IO__ManualToggle,  // IO:Name
      StatusChange__IODoRequest,  // IO:TRUE/FALSE
      StatusChange__MotorDoRequest,  // MOTOR:TRUE/FALSE
                                        // (CAN Motor)
      Move__ModuleOriginMove,  // Module:ModuleName,BlockNo,ModuleNo
      Machine__Run,  // Run:RecoveryStop:Stop
      Chamber__StepRequest,  // Chamber:BlockNo:ModuleNo:(Idle, PutReady, Processing, GetReady)
                                // MCS->Chamber
      ChamberManual__Run,  // Chamber:BlockNo:ModuleNo:ZoneIndex
                              // 
                              // MiniStep 보드만 적용
      ChamberManual__Stop,  // Chamber:BlockNo:ModuleNo:ZoneIndex
                               // 
                               // MiniStep 보드만 적용
      ChamberManual__AutoTuning,  // Chamber:BlockNo:ModuleNo:ZoneIndex
                                     // 
                                     // MiniStep 보드만 적용
      ChamberManual__PinHome,  // Chamber:BlockNo:ModuleNo
                                  // 
                                  // MiniStep 보드만 적용
      ChamberManual__PinReady,  // Chamber:BlockNo:ModuleNo
                                   // 
                                   // MiniStep 보드만 적용
      ChamberManual__PinDown,  // Chamber:BlockNo:ModuleNo
                                  // 
                                  // MiniStep 보드만 적용
      ChamberManual__PinUp,  // Chamber:BlockNo:ModuleNo
                                // 
                                // MiniStep 보드만 적용
      ChamberManual__ServoOn,  // Chamber:BlockNo:ModuleNo
                                  // 
                                  // MiniStep 보드만 적용
      ChamberManual__ServoOff,  // Chamber:BlockNo:ModuleNo
                                   // 
                                   // MiniStep 보드만 적용
      ChamberManual__ShutterOpen,  // Chamber:BlockNo:ModuleNo
                                      // 
                                      // MiniStep 보드만 적용
      ChamberManual__ShutterClose,  // Chamber:BlockNo:ModuleNo
                                       // 
                                       // MiniStep 보드만 적용
      ChamberManual__SetTemperature,  // Chamber:BlockNo:ModuleNo:ZoneIndex:Temp
                                         // 
                                         // MiniStep 보드만 적용
      StatusChange__ChamberDoRequest,  // Chamber:TRUE/FALSE
                                          // (MINI Board)
      ChamberManual__ChamberState,  // Chamber:BlockNo:ModuleNo
                                       // 
                                       // MiniStep 보드만 적용
      ChamberManual__MoveStop,  // Chamber:BlockNo:ModuleNo
                                   // 
                                   // MiniStep 보드만 적용
      ChamberManual__JogMove,  // Chamber:BlockNo:ModuleNo:CW/CCW
                                  // 
                                  // 속도는 일정하다
      ChamberManual__PitchMove,  // Chamber:BlockNo:ModuleNo:Pitch
      StatusChange__MonitoringDoRequest,  // MONITORING:TRUE/FALSE
      ChamberManual__DoManual,  // CHAMBER:(TRUE/FALSE)
      Move__DirectMove,  // Motor:Name,Position,Speed,Acc,Dec,Timeout
      Move__RelativeMove,  // Motor:Name,Position,Speed,Acc,Dec,Timeout
      Move__JogMove,  // Motor:Name,Speed,Acc,Dec
      Move__OriginMove,  // Motor:Name,Don't Care
      Request__CaptureDelete,
   };

   public enum EnumCommand_Setting {
      Send__Send,
      Cassette__ScanSet,
      Cassette__Start,
      Cassette__Stop,
      Cassette__RecipeSet,
      Cassette__Clear,  // clear data
   };

   public enum EnumCommand_Status {
      UnitStatus__MiniBoardState,  // Mini:BlockNo:ModuleNo:CurTemp:SetTemp:IsMoving:IsLimitM:IsLimitP:IsHomeOK:GetPos
      UnitStatus__SendStop,
      UnitStatus__SendStart,  // Request unit status for display
      UnitStatus__Result,
      RunStatus__Request,  // MACHINE;ASPE;IsRun
      RunStatus__Result,  // MACHINE;ASPE;IsIdle,LM;ABC;IsAlarm
      UnitStatus__MiniBoardIOState,  // AFADFDFDFFDFDFDFD ~32 (DI)
                                        // AFDFDFDFSFDSFDFD ~32 (DO)
      DATA__ChamberMonitoringData,  // PV
                                       // SV
      DATA__RequestAll,  // reqeust to send machine data all
      MCS__Data,  // DataName,abc;c;d;e,def;g;j
      MCS__DataFile,  // DataType|FileName
      MCS__HeartBeat,  // User defined data send
      MCS__LotStatus,  // Send Lot Status
      MCS__SerialData,  // Send Serial Data
      MCS__ActorInfo,  // Send Actor Information
      UnitStatus__DIState,  // DI:State
                               // IO:11010FFFF...
      UnitStatus__DOState,  // DO:State
                               // IO:11010FFFF...
      UnitStatus__MotorState,  // Motor:Name
                                  // 
                                  // Motor:Name,IsServoOn,IsAlarm,IsStop,IsMotion,IsInposition,IsPlusLimit,IsPlusHome,IsMinusLimit,IsMinusHome,IsHomming,CurPos,CmdPos
                                  // Motor:D1_X1,1,0,0,1,0,0,0,0,0,1,21.530,150
      Chamber__InitialResult,  // Assy:Chamber:BlockNo:ModuleNo:(IsNot/IsNeed/IsDoing/IsDone)
      Chamber__OriginMove,  // Chamber:AxisID:(IsDone:IsNot:IsDoing:IsDoneFile)
      Chamber__Information,  // 계속 보내줌
                                // Chamber:BlockNo:ModuleNo:(Idle, IdleDone, PutReady, PutReadyDone, Processing, ProcessingDone, GetReady, GetReadyDone)
                                // 
                                // Chamber->MCS
                                // 
                                // Mcs가 PutReady를 주면 ready후 IsPutReadyDone으로 변경
                                // Mcs가 PutDone을 주면 Processing으로 변경후 Procesing done으로 변경
                                // Mcs가 GetReady를 주면 ready후 IsGetReadyDone으로 변경
                                // Mcs가 GetDone을 주면 Idle로 변경
                                // 
      UnitStatus__ChamberState,  // Chamber:BlockNo:ModuleNo:State
                                    // 
                                    // Chamber->MCS/UI
      Cassette__Scan,  // Foup:Index:(IsDone / IsNot / IsDoing / IsDoneFail)
                          // 
                          // MCS->UI
      Cassette__MapData,  // Foup:Index:1111111111111111111111111
                             // 
                             // MCS->UI
      MCS__InitStep,  // Send Init Information ex) LM:AAA:IsDone
      MCS__Notify,
   };

   public enum EnumCommand_Alarm {
      Request__AlarmSet,
      Request__AlarmClear,  // Code:Part:Param
   };

   public enum EnumCommand_Warning {
      Send__Set,  // IDString,메세지
      Send__Clear,  // IDString
   };

   public enum EnumCommand_Config {
   };

   public enum EnumPrgCfg {
      Environment__Operation,  // DryMode, Interlock
      Environment__TowerLamp,  // O(On) X(OFF) T(Toggle)
                                  // RYGB(red,yellow,green,buzzer)
      Environment__ChamberInfo,  // 첫번째 부터 차례대로 정의
                                    // Index, Type, BlockNo, ModuleNo, Use(true/false)
                                    // 사용하지 않으면 띄우기
      Environment__CoaterInfo,  // Index, BlockNo, ModuleNo, Use(true/false)
      Environment__DeveloperInfo,  // Index, BlockNo, ModuleNo, Use(true/false)
      Environment__InterfaceInfo,  // WEE
                                      // Exposure
      Environment__RecipeTransperInfo,  // Recipe를 준비하기 위해 레시피를 보낸다.
                                           // UI->Chamber
      Environment__DummyLinkRecipeInfo,  // Dummy Recipe 전송
                                            // 
                                            // UI->Chamber
      Environment__Cassette,
      Lot__Job,  // 1,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,
                    // 2,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,WAFER_FLOW_RECIPE,
                    // 
                    // 1,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS
                    // 2,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS,RECIPE_PKS
                    // 
      Lot__LotInfo,
      MachineOption__WaferProcessMode,  // Manual = 0, Auto = 1
      PRA_Parameter__Stroke_CRA,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber01,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber00,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber02,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber03,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber04,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber05,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber06,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber07,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber08,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber09,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber10,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber11,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber12,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber13,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber14,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber15,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber16,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber17,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber18,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber19,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber20,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber21,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber22,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber23,  // BlockNo, ModuleNo, stroke(mm)
      PRA_Parameter__Stroke_Chamber24,  // BlockNo, ModuleNo, stroke(mm)
      SystemChamber__TempControllerComNo,
      SystemChamber__TemphumidityControllerComNo,
      SystemChamber__DryRunMode,
      SystemChamber__VelocityRatio,
      SystemChamber__Cot_PR_DispTime,
      SystemChamber__Dev_L_DispTime,  // 2
      SystemChamber__Dev_R_DispTime,
      SystemChamber__Cot_Dispense_Flag,
      SystemChamber__Dev_L_Dispense_Flag,
      SystemChamber__Dev_R_Dispense_Flag,
      SystemChamber__Cot_Rinse_DispTime,
      SystemChamber__Cot_BackRinse_DispTime,
      SystemChamber__Cot_Pump_Dispense_Amout,
      SystemChamber__Cot_Pump_Dispense_Accel,
      SystemChamber__Cot_Pump_Dispense_Decel,
      SystemChamber__Cot_Pump_Dispense_Rate,
      SystemChamber__Cot_Pump_Reload_Rate,
      SystemChamber__Cot_Pump_Calibration,
      SystemChamber__Dev_L_Rinse_DispTime,
      SystemChamber__Dev_L_BackRinse_DispTime,
      SystemChamber__Dev_R_BackRinse_DispTime,
      SystemChamber__Dev_R_Rinse_DispTime,
      SystemChamber__Cot_Bath_IntervalTime,
      SystemChamber__Cot_Bath_OperationTime,
      SystemChamber__Cot_Bath_Sel_NozzleNo,
      SystemChamber__Cot_Pump2_Calibration,
      SystemChamber__Cot_Pump2_Dispense_Accel,
      SystemChamber__Cot_Pump2_Dispense_Amout,
      SystemChamber__Cot_Pump2_Dispense_Decel,
      SystemChamber__Cot_Pump2_Dispense_Rate,
      SystemChamber__Cot_Pump2_Reload_Rate,
      SystemChamber__Cot_Pump3_Calibration,
      SystemChamber__Cot_Pump3_Dispense_Accel,
      SystemChamber__Cot_Pump3_Dispense_Amout,
      SystemChamber__Cot_Pump3_Dispense_Decel,
      SystemChamber__Cot_Pump3_Dispense_Rate,
      SystemChamber__Cot_Pump3_Reload_Rate,
   };

   public class DefineSet
   {
      public const string MACHINE_NAME = "All";
      public const string MACHINE_VERSION = "1.0.0.0";
      public static int GetEnumCount<TEnum>() { return Enum.GetValues(typeof(TEnum)).Length; }
   }

public class DefSFETrack
{
   public enum EnumLM {
      WatchDog = 0, // Watch dog
      PRB = 1,
      CSB = 2,
      IFB = 3,
   };

   public enum EnumAssy {
      SwitchButton = 0, // Start stop reset etc buttons
      Environment = 1, // Interlock kind thing
      TowerLamp = 2, // Towerlamp
      Developer = 3,
      PRA = 4,
      CRA = 5,
      IRA = 6,
      Coater = 7,
      Chamber = 8,
      Interface = 9,
      ChemicalBox = 10, // 약액공급장치
   };

   public enum EnumMotor {
      CRA_X = 0,
      CRA_Y = 1,
      CRA_Z = 2,
      PRA_X1 = 3,
      PRA_X2 = 4,
      PRA_X3 = 5,
      PRA_Y = 6,
      PRA_Z = 7,
      PRA_T = 8,
      D1_X1 = 9, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_PP2 = 10, // Board Type(string)
                                                                 // Channel(int)
                                                                 // Board ID(int)
                                                                 // ModuleNo(int)
      C1_X1 = 11, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_X2 = 12, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_BT = 13, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_PP1 = 14, // Board Type(string)
                                                                 // Channel(int)
                                                                 // Board ID(int)
                                                                 // ModuleNo(int)
      D2_X1 = 15, // Board Type(string)
                                                                // Channel(int)
                                                                // Board ID(int)
                                                                // ModuleNo(int)
      C1_PP3 = 16, // Board Type(string)
                                                                 // Channel(int)
                                                                 // Board ID(int)
                                                                 // ModuleNo(int)
      CB01_Pin = 17, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(hex)
                                                                   // ModuleNo(int)
      CB02_Pin = 18, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB03_Pin = 19, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB05_Pin = 20, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB04_Pin = 21, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB06_Pin = 22, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB07_Pin = 23, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB08_Pin = 24, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB09_Pin = 25, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB10_Pin = 26, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB11_Pin = 27, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      CB12_Pin = 28, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // ModuleNo(int)
      C1_SPIN = 29,
      D1_SPIN = 30,
      D2_SPIN = 31,
   };

   public enum EnumTeachingCRA_X {
      PosHome = 0,
      PRAWork = 1,
      PickDrop = 2,
   };

   public enum EnumTeachingCRA_Y {
      PosHome = 0,
      PRAWork = 1,
      Cassette = 2,
   };

   public enum EnumTeachingCRA_Z {
      PosHome = 0,
      PRAWork = 1,
      ScanStartPos = 2,
      ScanEndPos = 3,
      WaferPos = 4,
      ScanSlot0 = 5,
      ScanSlot1 = 6,
      ScanSlot2 = 7,
      ScanSlot3 = 8,
   };

   public enum EnumTeachingPRA_X1 {
      PosHome = 0,
      Chamber = 1,
      Developer = 2,
      Coater = 3,
      CRA = 4,
   };

   public enum EnumTeachingPRA_X2 {
      PosHome = 0,
      Chamber = 1,
      Developer = 2,
      Coater = 3,
      CRA = 4,
   };

   public enum EnumTeachingPRA_X3 {
      PosHome = 0,
      Chamber = 1,
      Developer = 2,
      Coater = 3,
      CRA = 4,
   };

   public enum EnumTeachingPRA_Y {
      PosHome = 0,
      Chamber = 1,
      Developer = 2,
      Coater = 3,
      CRA = 4,
   };

   public enum EnumTeachingPRA_Z {
      PosHome = 0,
      Chamber_X1 = 1,
      Chamber_X2 = 2,
      Chamber_X3 = 3,
      Developer_X1 = 4,
      Developer_X2 = 5,
      Developer_X3 = 6,
      Coater_X1 = 7,
      Coater_X2 = 8,
      Coater_X3 = 9,
      CRA_X1 = 10,
      CRA_X2 = 11,
      CRA_X3 = 12,
   };

   public enum EnumTeachingPRA_T {
      PosHome = 0,
      Chamber = 1,
      Developer = 2,
      Coater = 3,
      CRA = 4,
   };

   public enum EnumTeachingD1_X1 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
   };

   public enum EnumTeachingC1_PP2 {
      PosHome = 0,
   };

   public enum EnumTeachingC1_X1 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
   };

   public enum EnumTeachingC1_X2 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
      PosWaferEdge = 10,
   };

   public enum EnumTeachingC1_BT {
      PosNozzle1 = 0,
      PosNozzle2 = 1,
      PosNozzle3 = 2,
      PosNozzle4 = 3,
   };

   public enum EnumTeachingC1_PP1 {
      PosHome = 0,
   };

   public enum EnumTeachingD2_X1 {
      PosHome = 0,
      PosBegin = 1,
      PosCenter = 2,
      PosEnd = 3,
      PosDispense1 = 4,
      PosDispense2 = 5,
      PosDispense3 = 6,
      PosDispense4 = 7,
      PosDispense5 = 8,
      PosCenter2 = 9,
   };

   public enum EnumTeachingC1_PP3 {
      PosHome = 0,
   };

   public enum EnumTeachingCB01_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB02_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB03_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB05_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB04_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB06_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB07_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB08_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB09_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB10_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB11_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumTeachingCB12_Pin {
      PosUp = 0,
      PosDown = 1,
      PosMid = 2,
      PosReady = 3,
   };

   public enum EnumInput {
      Mappingforwardsensor = 0, // Mapping CYL forward detect
      Mappingbackwardsensor = 1, // Mapping CYL backward detect
      Liftpinupsensor = 2, // CRA pin up detect
      Liftpindownsensor = 3, // CRA pin down detect
      CRAwafersensor = 4, // CRA wafer detect
      Xchecksensor = 5, // 
      Xoutsensor = 6, // 
      CST1startswitch = 7, // CST1 start switch detect
      CST1stopswitch = 8, // CST1 stop switch detect
      CST2startswitch = 9, // CST2 start switch detect
      CST2stopswitch = 10, // CST2 stop switch detect
      CST3startswitch = 11, // CST3 start switch detect
      CST3stopswitch = 12, // CST3 stop switch detect
      CST4startswitch = 13, // CST4 start switch detect
      CST4stopswitch = 14, // CST4 stop switch detect
      CST1checksensor = 15, // 
      CST2checksensor = 16, // 
      CST3checksensor = 17, // 
      CST4checksensor = 18, // 
      CST1waferedgesensor = 19, // "Wafer extraction,Wafer transfer detect"
      CST2waferedgesensor = 20, // "Wafer extraction,Wafer transfer detect"
      CST3waferedgesensor = 21, // "Wafer extraction,Wafer transfer detect"
      CST4waferedgesensor = 22, // "Wafer extraction,Wafer transfer detect"
      Armpause = 23, // 
      CRAmapping = 24, // 
      CRAfan = 25,
      PRAWaferDetect = 26, // 
      ARMpause = 27, // 
      COT1Spinchuckvacsensor = 28, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      COT1Arm1upsensor = 29, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Arm1downsensor = 30, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Arm2upsensor = 31, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Arm2downsensor = 32, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Spinstopswitch = 33, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Exhaustpressuresensor = 34, // Board Type(string)
                                                                                    // Channel(int)
                                                                                    // Board ID(int)
                                                                                    // Index(int)
      COT1SpinchuckDown = 35, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Door = 36, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // Index(int)
      COT1Nozzle1sensor = 37, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Nozzle2sensor = 38, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Nozzle3sensor = 39, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1Nozzle4sensor = 40, // Board Type(string)
                                                                            // Channel(int)
                                                                            // Board ID(int)
                                                                            // Index(int)
      COT1ResistLeak = 41, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      COT1WastewaterLevelLow = 42,
      COT1RRCflowmeter = 43, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1WastewaterLeak = 44,
      COT1Fan1 = 45, // Board Type(string)
                                                                   // Channel(int)
                                                                   // Board ID(int)
                                                                   // Index(int)
      COT1EBRflowmeter = 46, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Backrinseflowmeter = 47, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      DEV1Spinchuckvacsensor = 48, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      DEV1Spinstopswitch = 49, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV1Exhaustpressuresensor = 50, // Board Type(string)
                                                                                    // Channel(int)
                                                                                    // Board ID(int)
                                                                                    // Index(int)
      DEV2SpinchuckDown = 51,
      DEV1SpinchuckUp = 52, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV1Arm1upsensor = 53, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV1Arm1downsensor = 54, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV1Arm2upsensor = 55, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV1Arm2downsensor = 56, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV2Spinchuckvacsensor = 57, // Board Type(string)
                                                                                 // Channel(int)
                                                                                 // Board ID(int)
                                                                                 // Index(int)
      DEV2Spinstopswitch = 58, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV2Exhaustpressuresensor = 59, // Board Type(string)
                                                                                    // Channel(int)
                                                                                    // Board ID(int)
                                                                                    // Index(int)
      DEV2SpinchuckUp = 60, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV2Arm1upsensor = 61, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV2Arm1downsensor = 62, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      DEV2Arm2upsensor = 63, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      DEV2Arm2downsensor = 64, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      CB01PinUp = 65, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
                                                                    // ModuleNo(int)
      CB01PinDown = 66, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
                                                                      // ModuleNo(int)
      CB01Magnet = 67, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
                                                                     // ModuleNo(int)
      CB02PinUp = 68, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
                                                                    // ModuleNo(int)
      CB02PinDown = 69, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
                                                                      // ModuleNo(int)
      CB02Magnet = 70, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
                                                                     // ModuleNo(int)
      CB03PinUp = 71, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
                                                                    // ModuleNo(int)
      CB03PinDown = 72, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
                                                                      // ModuleNo(int)
      CB03Magnet = 73, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
                                                                     // ModuleNo(int)
      CB04PinUp = 74, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB04PinDown = 75, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB04Magnet = 76, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB05PinUp = 77, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB05PinDown = 78, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB05Magnet = 79, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB06PinUp = 80, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB06PinDown = 81, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB06Magnet = 82, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB07PinUp = 83, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB07PinDown = 84, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB07Magnet = 85, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB08PinUp = 86, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB08PinDown = 87, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB08Magnet = 88, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB09PinUp = 89, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB09PinDown = 90, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB09Magnet = 91, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB10PinUp = 92, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB10PinDown = 93, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB10Magent = 94, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB11PinUp = 95, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB11PinDown = 96, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB11Magent = 97, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      CB12PinUp = 98, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(Hex)
                                                                    // Index(int)
      CB12PinDown = 99, // Board Type(string)
                                                                      // Channel(int)
                                                                      // Board ID(Hex)
                                                                      // Index(int)
      CB12Magnet = 100, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(Hex)
                                                                     // Index(int)
      COT1SpinchuckUp = 101,
      Solvent_BufferTank1_Overload = 102,
      Solvent_BufferTank1_High = 103,
      Solvent_BufferTank1_Mid = 104,
      Solvent_BufferTank1_Low = 105,
      Develop_BufferTank1_Overload = 106,
      Develop_BufferTank1_High = 107,
      Develop_BufferTank1_Mid = 108,
      Develop_BufferTank1_Low = 109,
      Solvent_BufferTank2_Overload = 110,
      Solvent_BufferTank2_High = 111,
      Solvent_BufferTank2_Mid = 112,
      Solvent_BufferTank2_Low = 113,
      Develop_BufferTank2_Overload = 114,
      Develop_BufferTank2_High = 115,
      Develop_BufferTank2_Mid = 116,
      Develop_BufferTank2_Low = 117,
      DEV1CupDownsensor = 118,
      DEV2DevelopFlowmeter = 119,
      DEV2RinseFlowmeter = 120,
      DEV2BackrinseFlowmeter = 121,
      DEV2CupUpsensor = 122,
      DEV2CupDownsensor = 123,
      DEV1WastewaterLevelHigh = 124,
      DEV1WastewaterLevelMid = 125,
      DEV1WastewaterLevelLow = 126,
      DEV1Door = 127,
      DEV2Door = 128,
      DEV1SpinchuckDown = 129,
      DEV1Arm2insensor = 130,
      DEV1Arm2outsensor = 131,
      DEV2Arm2insensor = 132,
      DEV2Arm2outsensor = 133,
      COT1Fan2 = 134,
      COT1Fan3 = 135,
      COT1Fan4 = 136,
      COT1Fan5 = 137,
      COT1WastewaterLevelHigh = 138,
      COT1WastewaterLevelMid = 139,
      DEV1DevelopFlowmeter = 140,
      DEV1RinseFlowmeter = 141,
      DEV1BackrinseFlowmeter = 142,
      DEV1CupUpsensor = 143,
      DEV1WastewaterLeak = 144,
      DrainEXH = 145,
      DrainMainAir = 146,
      DrainBucketAUpDetect = 147,
      DrainBucketADownDetect = 148,
      DrainBucketBUpDetect = 149,
      DrainBucketBDownDetect = 150,
      DrainLeak = 151,
      COT1Safety = 152,
      DEV1Safety = 153,
      DEV2Safety = 154,
   };

   public enum EnumOutput {
      MappingCYL = 0, // Mapping CYL operation
      LiftpinUpDown = 1, // CRA pin up/down
      CST1carrierled = 2, // 
      CST1standbyled = 3, // 
      CST1runningled = 4, // 
      CST1finishedled = 5, // 
      CST2carrierled = 6, // 
      CST2standbyled = 7, // 
      CST2runningled = 8, // 
      CST2finishedled = 9, // 
      CST3carrierled = 10, // 
      CST3standbyled = 11, // 
      CST3runningled = 12, // 
      CST3finishedled = 13, // 
      CST4carrierled = 14, // 
      CST4standbyled = 15, // 
      CST4runningled = 16, // 
      CST4finishedled = 17, // 
      CST1StopSWLed = 18,
      CST1StartSWLed = 19,
      COT1Resist1valve = 20, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Resist2valve = 21, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1Resist3valve = 22, // Board Type(string)
                                                                           // Channel(int)
                                                                           // Board ID(int)
                                                                           // Index(int)
      COT1EBRvalve = 23, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      COT1Solventbathvalve = 24, // Board Type(string)
                                                                               // Channel(int)
                                                                               // Board ID(int)
                                                                               // Index(int)
      COT1Resist4valve = 25,
      COT1Arm1LockUnlock = 26, // Board Type(string)
                                                                             // Channel(int)
                                                                             // Board ID(int)
                                                                             // Index(int)
      COT1Arm1Up = 27, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(int)
                                                                     // Index(int)
      COT1SpinchuckUp = 28, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      COT1Backrinse2valve = 29,
      COT1Arm2UpDown = 30, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      COT1SpinchuckVacOnOff = 31, // Board Type(string)
                                                                                // Channel(int)
                                                                                // Board ID(int)
                                                                                // Index(int)
      DEV1Rinsevalve = 32, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      DEV1DevValve = 33, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      DEV1Arm1Up = 34, // Board Type(string)
                                                                     // Channel(int)
                                                                     // Board ID(int)
                                                                     // Index(int)
      DEV1CupUp = 35, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(int)
                                                                    // Index(int)
      DEV1SpinchuckUp = 36, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV1AutodamperOpenClose = 37, // Board Type(string)
                                                                                  // Channel(int)
                                                                                  // Board ID(int)
                                                                                  // Index(int)
      DEV1SpinchuckVacOnOff = 38, // Board Type(string)
                                                                                // Channel(int)
                                                                                // Board ID(int)
                                                                                // Index(int)
      DEV1Arm2UpDown = 39, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      DEV2Rinsevalve = 40, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(int)
                                                                         // Index(int)
      DEV2DevValve = 41, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      DEV2Arm1Down = 42, // Board Type(string)
                                                                       // Channel(int)
                                                                       // Board ID(int)
                                                                       // Index(int)
      DEV2CupUp = 43, // Board Type(string)
                                                                    // Channel(int)
                                                                    // Board ID(int)
                                                                    // Index(int)
      DEV2SpinchuckUp = 44, // Board Type(string)
                                                                          // Channel(int)
                                                                          // Board ID(int)
                                                                          // Index(int)
      DEV2AutodamperOpenClose = 45, // Board Type(string)
                                                                                  // Channel(int)
                                                                                  // Board ID(int)
                                                                                  // Index(int)
      DEV2SpinchuckVacOnOff = 46, // Board Type(string)
                                                                                // Channel(int)
                                                                                // Board ID(int)
                                                                                // Index(int)
      DEV2Arm2UpDown = 47, // Board Type(string)
                                                                         // Channel(int)
                                                                         // Board ID(hex)
                                                                         // Index(int)
                                                                         // ModuleNo(int)
      CB01Door = 48,
      CB02Door = 49,
      CB03Door = 50,
      CB04Door = 51,
      CB05Door = 52,
      CB06Door = 53,
      CB07Door = 54,
      CB08Door = 55,
      CB09Door = 56,
      CB10Door = 57,
      CB11Door = 58,
      CB12Door = 59,
      COT1Arm1Down = 60,
      COT1SpinchuckDown = 61,
      DEV1Arm1Down = 62,
      DEV1SpinchuckDown = 63,
      DEV2SpinchuckDown = 64,
      DEV2Arm1Up = 65,
      Solvent_BufferTank1_Supply = 66,
      Solvent_BufferTank1_Press = 67,
      Solvent_BufferTank1_Drain = 68,
      Solvent_BufferTank2_Supply = 69,
      Solvent_BufferTank2_Drain = 70,
      Solvent_BufferTank2_Press = 71,
      Solvent_BufferTank_Switch = 72,
      Develop_BufferTank1_Supply = 73,
      Develop_BufferTank1_Press = 74,
      Develop_BufferTank1_Drain = 75,
      Develop_BufferTank2_Supply = 76,
      Develop_BufferTank2_Press = 77,
      Develop_BufferTank2_Drain = 78,
      Develop_BufferTank_Switch = 79,
      COT1RRCvalve = 80,
      DEV1Arm2InOut = 81,
      DEV2Arm2InOut = 82,
      DEV1CupDown = 83,
      DEV1Backrinsevalve = 84,
      DEV1Bubblerelease = 85,
      DEV2CupDown = 86,
      DEV2Bubblerelease = 87,
      DEV2Backrinsevalve = 88,
      CST2StartSWLed = 89,
      CST2StopSWLed = 90,
      CST3StartSWLed = 91,
      CST3StopSWLed = 92,
      CST4StartSWLed = 93,
      CST4StopSWLed = 94,
      TowerLampRed = 95,
      TowerLampYellow = 96,
      TowerLampGreen = 97,
      Buzzer = 98,
      COT1SpinStopSWLamp = 99,
      COT1PauseSWLamp = 100,
      DEV1SpinStopSWLamp = 101,
      DEV1PauseSWLamp = 102,
      DEV2SpinStopSWLamp = 103,
      DEV2PauseSWLamp = 104,
      DrainBucketALed = 105,
      DrainBucketBLed = 106,
      DrainCoverA = 107,
      DrainCoverB = 108,
      DrainPumpA = 109,
      DrainPumpB = 110,
      DrainValveA = 111,
      DrainValveB = 112,
      COT1Backrinse1valve = 113,
      COT1Safety = 114,
      DEV1Safety = 115,
      DEV2Safety = 116,
   };

   public enum EnumAIO {
   };

   public enum EnumActuator {
      MappingCYL_FwdBwd = 0,
      PinCYL_UpDown = 1,
   };

   public enum EnumCustom {
      Chamber = 0, // type
                                                                  // ADH, HHP, LHP, CPL이 있음. 이 종류는 Config로 정의
                                                                  // 
      Developer = 1,
      Coater = 2,
      Interface = 3, // WEE와 Exposure두개를 처리 한다.
   };

   public enum EnumCustomType {
      CUSTOM,
   };

   public enum EnumManual {
      AssyCRA__DoMakeRobotArmSafe,  // 0 //  //
      AssyCRA__DoMakeScanPosition,  // 1 // int // int storage
      AssyCRA__DoPickDropWaferOnCassette,  // 3 // EnumPickDrop, int, int // EnumPickDrop pickDrop, int cassetteID, int postion
      AssyCRA__DoRobotMoveToCassette,  // 3 // EnumPickDrop, int, int // EnumPickDrop pickDrop, int cassetteID, int postion
      AssyCRA__DoRobotMoveToPRA,  // 0 //  //
      AssyCRA__DoRobotZJobOnCassette,  // 3 // EnumPickDrop, int, int // EnumPickDrop pickDrop, int cassetteID, int postion
      AssyCRA__DoScanCassette,  // 1 // int // int storage
      AssyEnvironment__DoDoorOpenClose,  // 1 // bool // bool bOpen
      AssyIRA__DoPickDropWaferOnBuffer,  // 2 // EnumPickDrop, int // EnumPickDrop pickDrop, int bufferIndex
      AssyIRA__DoPickDropWaferOnPRA,  // 2 // EnumPickDrop, int // EnumPickDrop pickDrop, int praIndex
      AssyIRA__DoPickDropWaferOnProcess,  // 4 // EnumPickDrop, int, int, int // EnumPickDrop pickDrop, int armIndex, int blockNo, int moduleNo
      AssyPRA__DoMakeRobotArmSafe,  // 0 //  //
      AssyPRA__DoPickDropWaferOnCRA,  // 2 // EnumPickDrop, int // EnumPickDrop pickDrop, int armIndex
      AssyPRA__DoPickDropWaferOnProcess,  // 4 // EnumPickDrop, int, EnumCustomProcess, int // EnumPickDrop pickDrop, int armIndex, EnumCustomProcess customType, int workIndex
      AssyPRA__DoRobotMoveToProcess,  // 4 // EnumPickDrop, int, EnumCustomProcess, int // EnumPickDrop pickDrop, int armIndex, EnumCustomProcess customType, int workIndex
      AssyPRA__DoRobotZJobOnProcess,  // 4 // EnumPickDrop, int, EnumCustomProcess, int // EnumPickDrop pickDrop, int armIndex, EnumCustomProcess customType, int workIndex
      CustomChamber__DoTest,  // 0 //  //
   };

}

public class DefChamber
{
   public enum EnumLM {
      WatchDog = 0, // Watch dog
   };

   public enum EnumAssy {
      SwitchButton = 0, // Start stop reset etc buttons
      Environment = 1, // Interlock kind thing
      TowerLamp = 2, // Towerlamp
   };

   public enum EnumMotor {
   };

   public enum EnumInput {
   };

   public enum EnumOutput {
   };

   public enum EnumAIO {
   };

   public enum EnumActuator {
   };

   public enum EnumCustom {
   };

   public enum EnumCustomType {
   };

   public enum EnumManual {
   };

}
}
